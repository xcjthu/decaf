//### This file created by BYACC 1.8(/Java extension  1.13)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//###           14 Sep 06  -- Keltin Leung-- ReduceListener support, eliminate underflow report in error recovery
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 11 "Parser.y"
package decaf.frontend;

import decaf.tree.Tree;
import decaf.tree.Tree.*;
import decaf.error.*;
import java.util.*;
//#line 25 "Parser.java"
interface ReduceListener {
  public boolean onReduce(String rule);
}




public class Parser
             extends BaseParser
             implements ReduceListener
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

ReduceListener reduceListener = null;
void yyclearin ()       {yychar = (-1);}
void yyerrok ()         {yyerrflag=0;}
void addReduceListener(ReduceListener l) {
  reduceListener = l;}


//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//## **user defined:SemValue
String   yytext;//user variable to return contextual strings
SemValue yyval; //used to return semantic vals from action routines
SemValue yylval;//the 'lval' (result) I got from yylex()
SemValue valstk[] = new SemValue[YYSTACKSIZE];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
final void val_init()
{
  yyval=new SemValue();
  yylval=new SemValue();
  valptr=-1;
}
final void val_push(SemValue val)
{
  try {
    valptr++;
    valstk[valptr]=val;
  }
  catch (ArrayIndexOutOfBoundsException e) {
    int oldsize = valstk.length;
    int newsize = oldsize*2;
    SemValue[] newstack = new SemValue[newsize];
    System.arraycopy(valstk,0,newstack,0,oldsize);
    valstk = newstack;
    valstk[valptr]=val;
  }
}
final SemValue val_pop()
{
  return valstk[valptr--];
}
final void val_drop(int cnt)
{
  valptr -= cnt;
}
final SemValue val_peek(int relative)
{
  return valstk[valptr-relative];
}
//#### end semantic value section ####
public final static short VOID=257;
public final static short BOOL=258;
public final static short INT=259;
public final static short STRING=260;
public final static short CLASS=261;
public final static short NULL=262;
public final static short EXTENDS=263;
public final static short THIS=264;
public final static short WHILE=265;
public final static short FOR=266;
public final static short IF=267;
public final static short ELSE=268;
public final static short RETURN=269;
public final static short BREAK=270;
public final static short NEW=271;
public final static short PRINT=272;
public final static short READ_INTEGER=273;
public final static short READ_LINE=274;
public final static short LITERAL=275;
public final static short IDENTIFIER=276;
public final static short AND=277;
public final static short OR=278;
public final static short STATIC=279;
public final static short INSTANCEOF=280;
public final static short LESS_EQUAL=281;
public final static short GREATER_EQUAL=282;
public final static short EQUAL=283;
public final static short NOT_EQUAL=284;
public final static short SCOPY=285;
public final static short SEALED=286;
public final static short IFOR=287;
public final static short VAR=288;
public final static short DOUBLEMOD=289;
public final static short DOUBLEPLUS=290;
public final static short DEFAULT=291;
public final static short IN=292;
public final static short FOREACH=293;
public final static short ARRAYCOMBEGIN=294;
public final static short ARRAYCOMEND=295;
public final static short UMINUS=296;
public final static short EMPTY=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    1,    3,    4,    5,    5,    5,    5,    5,
    5,    2,    6,    6,    7,    7,    8,    8,    8,   10,
   10,   11,   11,    9,    9,   12,   13,   13,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   15,   15,   15,   28,   28,   25,   25,   25,   29,   27,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   31,   31,   31,   31,   32,   32,   30,   30,
   33,   33,   18,   19,   20,   20,   34,   34,   23,   24,
   16,   17,   36,   36,   36,   37,   35,   35,   21,   21,
   22,
};
final static short yylen[] = {                            2,
    1,    2,    1,    2,    2,    1,    1,    1,    1,    2,
    3,    7,    1,    0,    2,    0,    2,    2,    0,    1,
    0,    3,    1,    7,    6,    3,    2,    0,    1,    2,
    1,    1,    1,    1,    1,    2,    2,    2,    2,    1,
    3,    1,    0,    2,    0,    2,    4,    1,    2,    5,
    1,    1,    1,    3,    3,    6,    6,    9,    7,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    2,    2,    3,    3,    1,    4,    5,
    6,    5,    1,    3,    2,    1,    3,    1,    1,    0,
    3,    1,    5,    9,   10,    8,    1,    1,    1,    6,
    6,    4,    3,    1,    0,    3,    2,    0,    2,    1,
    4,
};
final static short yydefred[] = {                         0,
   13,    0,    0,    3,    0,    2,    0,    0,    0,    0,
   15,   19,    0,    7,    8,    6,    9,    0,    0,   12,
   17,    0,    0,   18,   10,    0,    4,    0,    0,    0,
    0,   11,    0,   23,    0,    0,    0,    0,    5,    0,
    0,    0,   28,   25,   22,   24,    0,   86,   78,    0,
    0,    0,    0,   99,    0,    0,    0,    0,   83,    0,
    0,    0,    0,    0,   26,    0,    0,    0,   29,   40,
   27,    0,   31,   32,   33,   34,   35,    0,    0,    0,
    0,    0,    0,    0,    0,   48,   53,    0,    0,    0,
    0,   51,    0,   52,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   85,    0,    0,    0,    0,   49,
    0,   30,   36,   37,   38,   39,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   44,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  104,    0,    0,    0,    0,   76,   77,    0,    0,   73,
    0,    0,   84,    0,   97,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
    0,   79,    0,    0,  111,    0,    0,    0,    0,   87,
    0,    0,    0,    0,    0,    0,   93,    0,    0,  106,
  103,   80,    0,    0,   82,    0,   88,    0,    0,    0,
    0,   50,    0,    0,  101,   81,    0,  100,    0,   57,
   56,    0,  107,    0,   59,    0,    0,    0,    0,    0,
   96,   94,   58,    0,   95,
};
final static short yydgoto[] = {                          2,
    3,    4,   69,   22,   35,    5,   10,   13,   24,   36,
   37,   70,   47,   71,   72,   73,   74,   75,   76,   77,
   78,   79,   80,   81,   92,   83,   94,   85,   86,  195,
   87,  108,  145,  157,  215,  140,  141,
};
final static short yysindex[] = {                      -258,
    0,    0, -258,    0, -225,    0, -236, -222, -234,  -76,
    0,    0, -104,    0,    0,    0,    0, -220,  -97,    0,
    0,   -2,  -88,    0,    0,  -85,    0,   22,  -21,   28,
  -97,    0,  -97,    0,  -82,   36,   40,   53,    0,  -28,
  -97,  -28,    0,    0,    0,    0,    6,    0,    0,   56,
   62,  -13,  125,    0,  267,   64,   66,   67,    0,   71,
  125,  125,   68,   87,    0,   72, -162,   75,    0,    0,
    0,   57,    0,    0,    0,    0,    0,   60,   69,   74,
   76,   65, 1362,    0, -155,    0,    0,  125,  125,  125,
  125,    0, 1362,    0,   83,   34,  125,   89,   95,  125,
  -17,  -17, -139,  887,    0,  913,    0,  -22, -138,    0,
  -74,    0,    0,    0,    0,    0,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
    0,  125,  125,  125,  100,  939,   82,  969, 1218, -106,
    0,  102,  106, 1362,    4,    0,    0, 1034,  103,    0,
 -131,  -83,    0,  104,    0,   77, -127, 1362,  158, 1394,
  -32,  -32,    7,    7,   33,   33,  -17,  -17,  -17,  -32,
  -32,  773,   18,  -32,  125,   43,  125,   43,   43,    0,
  125,    0, 1089,  125,    0, -126,  125, -125,  -60,    0,
  125, -123, -119,  125,  132,  130,    0, 1113,  -92,    0,
    0,    0, 1362,  136,    0,  125,    0, 1194,  125,  125,
 1244,    0,  125,   43,    0,    0,  808,    0,  830,    0,
    0,  148,    0,  125,    0,  125,   43,   43, 1283, 1315,
    0,    0,    0,   43,    0,
};
final static short yyrindex[] = {                       -71,
    0,    0,    1,    0,    0,    0,    0,   84,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  139,    0,    0,
  165,    0,  165,    0,    0,    0,  167,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -57,    0,    0,    0,
    0,    0,  -55,    0,    0,    0,    0,    0,    0,    0,
  -67,  -67,  -67,  -67,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1383,    0,  863,    0,    0,    0,  -67,  -57,  -67,
 -105,    0,  153,    0,    0,    0,  -67,    0,    0,  -67,
  418,  444,    0,    0,    0,    0,  559,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -67,  -67,  -67,  -67,
  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
    0,  -67,  -67,  -67,  365,    0,    0,    0,    0,    0,
    0,    0,  -67,   37,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -63,    0,  -16,  152,   59,
  619, 1292,  768,  933, 1494, 1565,  471,  497,  524, 1421,
 1527,    0, 1453, 1597,  -25,  -57,  -67,  -57,  -57,    0,
  -67,    0,    0,  -67,    0,    0,  -67,    0,    0,    0,
  -67,    0,  391,  -67,    0,  176,    0,    0,  -33,    0,
    0,    0,   41,    0,    0,  -67,    0,    0,  -67,  -67,
    0,    0,  -23,  -57,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -67,    0,  -67,  -57,  -57,    0,    0,
    0,    0,    0,  -57,    0,
};
final static short yygindex[] = {                         0,
    0,  219,  210,   58,   11,    0,    0,    0,    0,  197,
    0,   -8,    0, -141,  -66,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  384, 1797,  890,    0,    0,    0,
  -47,    0,   73,    0,    0,    0,   54,
};
final static int YYTABLESIZE=2023;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        108,
    1,   43,   29,  110,  128,   29,  108,  189,   29,  126,
  124,  108,  125,  131,  127,   90,  107,   43,  180,  105,
   20,  152,  137,   23,   41,  108,   90,    1,  131,   26,
  189,   44,  105,   46,  197,    7,  199,  200,   62,    8,
    9,   11,   41,  128,  185,   63,   12,  184,  126,  124,
   61,  125,  131,  127,  128,   25,   27,  108,  132,  126,
  124,   31,  125,  131,  127,   96,  130,   33,  129,  128,
  153,   32,  223,  132,  126,   62,   40,   92,  131,  127,
   92,   91,   63,   41,   91,  231,  232,   61,   34,  108,
   34,  108,  235,   42,   43,   88,   64,  132,   45,   72,
   62,   89,   72,   97,  190,   98,   99,   63,  132,   91,
  100,  109,   61,  110,  111,  112,   72,   72,  113,   62,
  135,  156,  142,  132,  143,  117,   63,  114,   43,  146,
   65,   61,  115,   64,  116,  147,  149,  154,   62,  175,
  177,  207,  182,  187,  188,   63,  222,  191,  192,  204,
   61,   72,   14,   15,   16,   17,   18,   62,   64,   14,
   15,   16,   17,   18,   63,   43,  206,   29,  209,   61,
   45,  210,  212,  184,   19,  214,  216,   64,   48,  105,
  181,  105,   14,   15,   16,   17,   18,   28,  228,   14,
   30,   59,   71,   39,  128,   71,   64,    5,   32,  126,
  124,   48,  125,  131,  127,   21,   16,   20,   45,   71,
   71,  109,   98,  155,   59,   64,   89,  130,   45,  129,
   45,    6,   21,  108,  108,  108,  108,  108,  108,   38,
  108,  108,  108,  108,  201,  108,  108,  108,  108,  108,
  108,  108,  108,    0,   71,    0,  108,  196,  132,    0,
   45,  108,   45,  108,  108,    0,  133,  134,    0,  108,
    0,   14,   14,   15,   16,   17,   18,   48,    0,   49,
   50,   51,   52,    0,   53,   54,   55,   56,   57,   58,
   59,    0,    0,    0,    0,   60,    0,  120,  121,    0,
   66,    0,    0,   67,    0,  133,  134,    0,   68,   14,
   15,   16,   17,   18,   48,    0,   49,   50,   51,   52,
    0,   53,   54,   55,   56,   57,   58,   59,    0,    0,
    0,    0,   60,   72,   72,   72,    0,   66,  103,   48,
   67,   49,    0,    0,    0,   68,   72,    0,   55,    0,
   57,   58,   59,    0,    0,    0,    0,   60,   48,    0,
   49,    0,    0,    0,    0,   67,    0,   55,    0,   57,
   58,   59,    0,    0,    0,    0,   60,   48,    0,   49,
    0,    0,    0,    0,   67,    0,   55,    0,   57,   58,
   59,    0,    0,    0,    0,   60,   48,    0,   49,    0,
    0,    0,    0,   67,    0,   55,    0,   57,   58,   59,
    0,   46,    0,    0,   60,   46,   46,   46,   46,   46,
   46,   46,   67,    0,    0,    0,   71,   71,   71,    0,
    0,    0,   46,   46,   46,   46,   46,   47,   71,   71,
   82,   47,   47,   47,   47,   47,   47,   47,  120,  121,
  122,  123,    0,    0,    0,    0,  133,  134,   47,   47,
   47,   47,   47,    0,   74,   46,    0,   46,   74,   74,
   74,   74,   74,    0,   74,    0,    0,    0,    0,    0,
    0,    0,   82,    0,    0,   74,   74,   74,    0,   74,
   75,   47,    0,   47,   75,   75,   75,   75,   75,    0,
   75,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   75,   75,   75,    0,   75,    0,   62,    0,    0,
   74,   62,   62,   62,   62,   62,    0,   62,    0,    0,
    0,    0,    0,   14,   15,   16,   17,   18,   62,   62,
   62,    0,   62,   63,    0,    0,   75,   63,   63,   63,
   63,   63,   95,   63,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   63,   63,   63,    0,   63,   82,
   64,   82,   82,   62,   64,   64,   64,   64,   64,    0,
   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   64,   64,   64,    0,   64,    0,    0,    0,   63,
    0,    0,    0,    0,    0,   53,   82,   82,    0,    0,
   53,   53,   88,   53,   53,   53,    0,    0,    0,    0,
   82,   82,    0,    0,    0,    0,   64,   82,   53,    0,
   53,    0,    0,    0,    0,    0,    0,    0,    0,   46,
   46,   46,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   46,   46,    0,    0,   46,   46,   46,   46,   53,
    0,   88,    0,   46,   46,   47,   47,   47,    0,   69,
    0,    0,   69,    0,    0,    0,    0,   47,   47,    0,
    0,   47,   47,   47,   47,    0,   69,   69,    0,   47,
   47,    0,   74,   74,   74,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   74,   74,    0,    0,   74,   74,
   74,   74,    0,    0,    0,    0,   74,   74,   75,   75,
   75,   69,    0,    0,    0,    0,    0,    0,    0,    0,
   75,   75,    0,    0,   75,   75,   75,   75,    0,    0,
    0,    0,   75,   75,    0,   62,   62,   62,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   62,   62,    0,
    0,   62,   62,   62,   62,    0,    0,    0,    0,   62,
   62,   63,   63,   63,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   63,   63,    0,    0,   63,   63,   63,
   63,    0,    0,    0,    0,   63,   63,    0,   64,   64,
   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   64,   64,    0,    0,   64,   64,   64,   64,   65,  128,
    0,   65,   64,   64,  126,  124,    0,  125,  131,  127,
    0,    0,    0,    0,   53,   65,   65,    0,    0,    0,
  194,    0,  130,    0,  129,   53,   53,    0,    0,   53,
   53,   53,   53,    0,  128,    0,    0,   53,   53,  126,
  124,    0,  125,  131,  127,    0,    0,    0,    0,    0,
   65,    0,    0,  132,    0,  193,  128,  130,    0,  129,
  227,  126,  124,    0,  125,  131,  127,    0,    0,    0,
    0,    0,    0,   69,   69,   69,    0,    0,    0,  130,
    0,  129,    0,    0,    0,   69,   69,    0,  132,   52,
  225,   69,   69,   42,   52,   52,    0,   52,   52,   52,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  132,   42,   52,  128,   52,    0,    0,  150,  126,  124,
    0,  125,  131,  127,    0,    0,   84,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  130,    0,  129,  128,
    0,    0,    0,   52,  126,  124,    0,  125,  131,  127,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  130,   66,  129,  128,   66,  132,   84,  176,
  126,  124,    0,  125,  131,  127,    0,    0,    0,    0,
   66,   66,    0,    0,    0,    0,    0,    0,  130,    0,
  129,    0,    0,  132,    0,  128,    0,    0,    0,  178,
  126,  124,    0,  125,  131,  127,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   66,    0,    0,  130,  132,
  129,    0,   65,   65,   65,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   65,   65,    0,    0,    0,  118,
  119,    0,    0,  120,  121,  122,  123,    0,    0,  132,
    0,  133,  134,    0,    0,   84,    0,   84,   84,    0,
  128,    0,    0,    0,  224,  126,  124,  186,  125,  131,
  127,    0,    0,    0,  118,  119,    0,    0,  120,  121,
  122,  123,    0,  130,  226,  129,  133,  134,    0,    0,
    0,    0,   84,   84,    0,    0,  118,  119,    0,    0,
  120,  121,  122,  123,    0,    0,   84,   84,  133,  134,
    0,    0,    0,   84,  132,  128,    0,    0,    0,    0,
  126,  124,    0,  125,  131,  127,    0,    0,    0,   52,
   52,    0,    0,   52,   52,   52,   52,    0,  130,  128,
  129,   52,   52,    0,  126,  124,    0,  125,  131,  127,
    0,    0,    0,  118,  119,    0,    0,  120,  121,  122,
  123,  213,  130,    0,  129,  133,  134,    0,  151,  132,
    0,  202,    0,    0,    0,    0,    0,    0,    0,  118,
  119,    0,    0,  120,  121,  122,  123,   66,   66,   66,
    0,  133,  134,  132,    0,    0,    0,    0,    0,   66,
   66,    0,    0,    0,    0,  118,  119,    0,    0,  120,
  121,  122,  123,    0,    0,    0,    0,  133,  134,    0,
  128,    0,    0,    0,  218,  126,  124,    0,  125,  131,
  127,    0,    0,    0,    0,  118,  119,    0,    0,  120,
  121,  122,  123,  130,  128,  129,    0,  133,  134,  126,
  124,    0,  125,  131,  127,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  179,    0,  130,    0,  129,
  128,    0,    0,    0,  132,  126,  124,    0,  125,  131,
  127,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  130,    0,  129,    0,    0,  132,    0,
  118,  119,    0,    0,  120,  121,  122,  123,    0,  128,
    0,    0,  133,  134,  126,  124,    0,  125,  131,  127,
    0,    0,   70,    0,  132,   70,  221,    0,    0,    0,
    0,    0,  130,    0,  129,    0,    0,    0,    0,   70,
   70,  128,    0,    0,    0,  234,  126,  124,    0,  125,
  131,  127,    0,    0,    0,  118,  119,    0,    0,  120,
  121,  122,  123,  132,  130,  233,  129,  133,  134,    0,
    0,    0,    0,    0,   70,    0,    0,    0,    0,  118,
  119,    0,    0,  120,  121,  122,  123,    0,  128,    0,
    0,  133,  134,  126,  124,  132,  125,  131,  127,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   51,
    0,  130,    0,  129,   51,   51,    0,   51,   51,   51,
  128,    0,    0,    0,    0,  126,  124,    0,  125,  131,
  127,    0,   51,    0,   51,    0,    0,    0,    0,    0,
    0,    0,  132,  130,    0,  129,    0,    0,    0,    0,
    0,   68,    0,    0,   68,    0,    0,    0,    0,    0,
  118,  119,    0,   51,  120,  121,  122,  123,   68,   68,
    0,    0,  133,  134,  132,    0,    0,    0,    0,    0,
    0,    0,    0,   54,  118,  119,   54,    0,  120,  121,
  122,  123,    0,    0,    0,    0,  133,  134,    0,    0,
   54,   54,   54,   68,   54,    0,    0,    0,    0,    0,
  118,  119,    0,    0,  120,  121,  122,  123,    0,    0,
    0,    0,  133,  134,   60,    0,   60,   60,   60,    0,
    0,    0,    0,    0,    0,   54,    0,    0,    0,    0,
    0,   60,   60,   60,    0,   60,   70,   70,   70,  118,
  119,    0,    0,  120,  121,  122,  123,   67,   70,   70,
   67,  133,  134,    0,   70,   70,    0,    0,    0,    0,
    0,    0,    0,    0,   67,   67,   60,    0,    0,    0,
    0,  118,  119,    0,    0,  120,  121,  122,  123,    0,
    0,    0,    0,  133,  134,   61,    0,   61,   61,   61,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   67,
    0,    0,   61,   61,   61,    0,   61,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   55,  118,  119,
   55,    0,  120,  121,  122,  123,    0,    0,    0,    0,
  133,  134,    0,    0,   55,   55,   55,   61,   55,   51,
   51,    0,    0,   51,   51,   51,   51,    0,    0,    0,
  118,   51,   51,    0,  120,  121,  122,  123,    0,    0,
    0,    0,  133,  134,    0,   68,   68,   68,    0,   55,
    0,    0,    0,    0,    0,    0,    0,   68,   68,    0,
    0,    0,    0,   68,   68,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,   54,   54,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
   54,    0,    0,   54,   54,   54,   54,    0,    0,    0,
    0,   54,   54,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   60,   60,
   60,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   60,   60,    0,    0,   60,   60,   60,   60,    0,    0,
    0,    0,   60,   60,    0,    0,    0,    0,    0,    0,
    0,   67,   67,   67,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   67,   67,    0,    0,    0,    0,   67,
   67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
   61,   61,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   61,   61,    0,    0,   61,   61,   61,   61,   93,
    0,    0,    0,   61,   61,    0,    0,  101,  102,  104,
  106,   55,   55,   55,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   55,   55,    0,    0,   55,   55,   55,
   55,    0,    0,    0,  136,    0,  138,  139,    0,    0,
    0,    0,    0,  144,    0,    0,  148,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  158,  159,  160,  161,  162,  163,  164,
  165,  166,  167,  168,  169,  170,  171,    0,  172,  173,
  174,    0,    0,    0,    0,    0,    0,    0,    0,  183,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  144,    0,  198,    0,    0,    0,  139,    0,    0,
  203,    0,    0,  205,    0,    0,    0,  208,    0,    0,
  211,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  217,    0,    0,  219,  220,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  229,    0,  230,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         33,
    0,   59,   91,   59,   37,   91,   40,   91,   91,   42,
   43,   45,   45,   46,   47,   41,   64,   41,  125,  125,
  125,   44,   89,   13,   41,   59,   40,  286,   46,   19,
   91,   40,   93,   42,  176,  261,  178,  179,   33,  276,
  263,  276,   59,   37,   41,   40,  123,   44,   42,   43,
   45,   45,   46,   47,   37,  276,   59,   91,   91,   42,
   43,   40,   45,   46,   47,   55,   60,   40,   62,   37,
   93,   93,  214,   91,   42,   33,   41,   41,   46,   47,
   44,   41,   40,   44,   44,  227,  228,   45,   31,  123,
   33,  125,  234,   41,  123,   40,   91,   91,   41,   41,
   33,   40,   44,   40,  152,   40,   40,   40,   91,  123,
   40,   40,   45,  276,   40,   59,   58,   59,   59,   33,
  276,  111,   40,   91,   91,   61,   40,   59,  123,   41,
  125,   45,   59,   91,   59,   41,  276,  276,   33,   40,
   59,  189,   41,   41,  276,   40,  213,   44,  276,  276,
   45,   93,  257,  258,  259,  260,  261,   33,   91,  257,
  258,  259,  260,  261,   40,  123,  292,   91,  292,   45,
  276,  291,   41,   44,  279,  268,   41,   91,  262,   93,
  287,  287,  257,  258,  259,  260,  261,  276,   41,  261,
  276,  275,   41,  276,   37,   44,   91,   59,   93,   42,
   43,  262,   45,   46,   47,   41,  123,   41,  276,   58,
   59,   59,  276,  288,  275,   91,   41,   60,  276,   62,
  276,    3,   13,  257,  258,  259,  260,  261,  262,   33,
  264,  265,  266,  267,  181,  269,  270,  271,  272,  273,
  274,  275,  276,   -1,   93,   -1,  280,  175,   91,   -1,
  276,  285,  276,  287,  288,   -1,  289,  290,   -1,  293,
   -1,  261,  257,  258,  259,  260,  261,  262,   -1,  264,
  265,  266,  267,   -1,  269,  270,  271,  272,  273,  274,
  275,   -1,   -1,   -1,   -1,  280,   -1,  281,  282,   -1,
  285,   -1,   -1,  288,   -1,  289,  290,   -1,  293,  257,
  258,  259,  260,  261,  262,   -1,  264,  265,  266,  267,
   -1,  269,  270,  271,  272,  273,  274,  275,   -1,   -1,
   -1,   -1,  280,  265,  266,  267,   -1,  285,  261,  262,
  288,  264,   -1,   -1,   -1,  293,  278,   -1,  271,   -1,
  273,  274,  275,   -1,   -1,   -1,   -1,  280,  262,   -1,
  264,   -1,   -1,   -1,   -1,  288,   -1,  271,   -1,  273,
  274,  275,   -1,   -1,   -1,   -1,  280,  262,   -1,  264,
   -1,   -1,   -1,   -1,  288,   -1,  271,   -1,  273,  274,
  275,   -1,   -1,   -1,   -1,  280,  262,   -1,  264,   -1,
   -1,   -1,   -1,  288,   -1,  271,   -1,  273,  274,  275,
   -1,   37,   -1,   -1,  280,   41,   42,   43,   44,   45,
   46,   47,  288,   -1,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   37,  277,  278,
   47,   41,   42,   43,   44,   45,   46,   47,  281,  282,
  283,  284,   -1,   -1,   -1,   -1,  289,  290,   58,   59,
   60,   61,   62,   -1,   37,   91,   -1,   93,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   89,   -1,   -1,   58,   59,   60,   -1,   62,
   37,   91,   -1,   93,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   -1,   62,   -1,   37,   -1,   -1,
   93,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,   58,   59,
   60,   -1,   62,   37,   -1,   -1,   93,   41,   42,   43,
   44,   45,  276,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,  176,
   37,  178,  179,   93,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   -1,   62,   -1,   -1,   -1,   93,
   -1,   -1,   -1,   -1,   -1,   37,  213,  214,   -1,   -1,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
  227,  228,   -1,   -1,   -1,   -1,   93,  234,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,   91,
   -1,   93,   -1,  289,  290,  265,  266,  267,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,  277,  278,   -1,
   -1,  281,  282,  283,  284,   -1,   58,   59,   -1,  289,
  290,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,
  283,  284,   -1,   -1,   -1,   -1,  289,  290,  265,  266,
  267,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,
   -1,  281,  282,  283,  284,   -1,   -1,   -1,   -1,  289,
  290,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,
  284,   -1,   -1,   -1,   -1,  289,  290,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,   41,   37,
   -1,   44,  289,  290,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,  266,   58,   59,   -1,   -1,   -1,
   58,   -1,   60,   -1,   62,  277,  278,   -1,   -1,  281,
  282,  283,  284,   -1,   37,   -1,   -1,  289,  290,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   91,   -1,   93,   37,   60,   -1,   62,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   60,
   -1,   62,   -1,   -1,   -1,  277,  278,   -1,   91,   37,
   93,  283,  284,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   59,   60,   37,   62,   -1,   -1,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   37,
   -1,   -1,   -1,   91,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   41,   62,   37,   44,   91,   89,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,   -1,   -1,   91,   -1,   37,   -1,   -1,   -1,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   60,   91,
   62,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,   91,
   -1,  289,  290,   -1,   -1,  176,   -1,  178,  179,   -1,
   37,   -1,   -1,   -1,  267,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,
  283,  284,   -1,   60,  265,   62,  289,  290,   -1,   -1,
   -1,   -1,  213,  214,   -1,   -1,  277,  278,   -1,   -1,
  281,  282,  283,  284,   -1,   -1,  227,  228,  289,  290,
   -1,   -1,   -1,  234,   91,   37,   -1,   -1,   -1,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   -1,   60,   37,
   62,  289,  290,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,
  284,   59,   60,   -1,   62,  289,  290,   -1,  266,   91,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,  265,  266,  267,
   -1,  289,  290,   91,   -1,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,
  282,  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,
   37,   -1,   -1,   -1,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,
  282,  283,  284,   60,   37,   62,   -1,  289,  290,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   60,   -1,   62,
   37,   -1,   -1,   -1,   91,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   91,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,   37,
   -1,   -1,  289,  290,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   41,   -1,   91,   44,   93,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   58,
   59,   37,   -1,   -1,   -1,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,  277,  278,   -1,   -1,  281,
  282,  283,  284,   91,   60,   93,   62,  289,  290,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   -1,   37,   -1,
   -1,  289,  290,   42,   43,   91,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   -1,   60,   -1,   62,   42,   43,   -1,   45,   46,   47,
   37,   -1,   -1,   -1,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
  277,  278,   -1,   91,  281,  282,  283,  284,   58,   59,
   -1,   -1,  289,  290,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   41,  277,  278,   44,   -1,  281,  282,
  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,   -1,
   58,   59,   60,   93,   62,   -1,   -1,   -1,   -1,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   41,   -1,   43,   44,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   -1,   62,  265,  266,  267,  277,
  278,   -1,   -1,  281,  282,  283,  284,   41,  277,  278,
   44,  289,  290,   -1,  283,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   93,   -1,   -1,   -1,
   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,
   -1,   -1,   -1,  289,  290,   41,   -1,   43,   44,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   -1,   -1,   58,   59,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,  277,  278,
   44,   -1,  281,  282,  283,  284,   -1,   -1,   -1,   -1,
  289,  290,   -1,   -1,   58,   59,   60,   93,   62,  277,
  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,   -1,
  277,  289,  290,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   -1,  265,  266,  267,   -1,   93,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,
   -1,   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,   -1,
   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  277,  278,   -1,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  277,  278,   -1,   -1,   -1,   -1,  283,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  277,  278,   -1,   -1,  281,  282,  283,  284,   53,
   -1,   -1,   -1,  289,  290,   -1,   -1,   61,   62,   63,
   64,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  277,  278,   -1,   -1,  281,  282,  283,
  284,   -1,   -1,   -1,   88,   -1,   90,   91,   -1,   -1,
   -1,   -1,   -1,   97,   -1,   -1,  100,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  117,  118,  119,  120,  121,  122,  123,
  124,  125,  126,  127,  128,  129,  130,   -1,  132,  133,
  134,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  143,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  175,   -1,  177,   -1,   -1,   -1,  181,   -1,   -1,
  184,   -1,   -1,  187,   -1,   -1,   -1,  191,   -1,   -1,
  194,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  206,   -1,   -1,  209,  210,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  224,   -1,  226,
};
}
final static short YYFINAL=2;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'",null,null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"VOID","BOOL","INT","STRING",
"CLASS","NULL","EXTENDS","THIS","WHILE","FOR","IF","ELSE","RETURN","BREAK",
"NEW","PRINT","READ_INTEGER","READ_LINE","LITERAL","IDENTIFIER","AND","OR",
"STATIC","INSTANCEOF","LESS_EQUAL","GREATER_EQUAL","EQUAL","NOT_EQUAL","SCOPY",
"SEALED","IFOR","VAR","DOUBLEMOD","DOUBLEPLUS","DEFAULT","IN","FOREACH",
"ARRAYCOMBEGIN","ARRAYCOMEND","UMINUS","EMPTY",
};
final static String yyrule[] = {
"$accept : Program",
"Program : ClassList",
"ClassList : ClassList ClassDef",
"ClassList : ClassDef",
"VariableDef : Variable ';'",
"Variable : Type IDENTIFIER",
"Type : INT",
"Type : VOID",
"Type : BOOL",
"Type : STRING",
"Type : CLASS IDENTIFIER",
"Type : Type '[' ']'",
"ClassDef : SealDef CLASS IDENTIFIER ExtendsClause '{' FieldList '}'",
"SealDef : SEALED",
"SealDef :",
"ExtendsClause : EXTENDS IDENTIFIER",
"ExtendsClause :",
"FieldList : FieldList VariableDef",
"FieldList : FieldList FunctionDef",
"FieldList :",
"Formals : VariableList",
"Formals :",
"VariableList : VariableList ',' Variable",
"VariableList : Variable",
"FunctionDef : STATIC Type IDENTIFIER '(' Formals ')' StmtBlock",
"FunctionDef : Type IDENTIFIER '(' Formals ')' StmtBlock",
"StmtBlock : '{' StmtList '}'",
"StmtList : StmtList Stmt",
"StmtList :",
"Stmt : VariableDef",
"Stmt : SimpleStmt ';'",
"Stmt : IfStmt",
"Stmt : GuardedStmt",
"Stmt : WhileStmt",
"Stmt : ForStmt",
"Stmt : ForeachStmt",
"Stmt : ReturnStmt ';'",
"Stmt : PrintStmt ';'",
"Stmt : BreakStmt ';'",
"Stmt : OCStmt ';'",
"Stmt : StmtBlock",
"SimpleStmt : LValue '=' Expr",
"SimpleStmt : Call",
"SimpleStmt :",
"Receiver : Expr '.'",
"Receiver :",
"LValue : Receiver IDENTIFIER",
"LValue : Expr '[' Expr ']'",
"LValue : VarDef",
"VarDef : VAR IDENTIFIER",
"Call : Receiver IDENTIFIER '(' Actuals ')'",
"Expr : LValue",
"Expr : Call",
"Expr : Constant",
"Expr : Expr DOUBLEMOD Expr",
"Expr : Expr DOUBLEPLUS Expr",
"Expr : Expr '[' Expr ':' Expr ']'",
"Expr : Expr '[' Expr ']' DEFAULT Expr",
"Expr : '[' Expr FOR IDENTIFIER IN Expr IF Expr ']'",
"Expr : '[' Expr FOR IDENTIFIER IN Expr ']'",
"Expr : Expr '+' Expr",
"Expr : Expr '-' Expr",
"Expr : Expr '*' Expr",
"Expr : Expr '/' Expr",
"Expr : Expr '%' Expr",
"Expr : Expr EQUAL Expr",
"Expr : Expr NOT_EQUAL Expr",
"Expr : Expr '<' Expr",
"Expr : Expr '>' Expr",
"Expr : Expr LESS_EQUAL Expr",
"Expr : Expr GREATER_EQUAL Expr",
"Expr : Expr AND Expr",
"Expr : Expr OR Expr",
"Expr : '(' Expr ')'",
"Expr : '-' Expr",
"Expr : '!' Expr",
"Expr : READ_INTEGER '(' ')'",
"Expr : READ_LINE '(' ')'",
"Expr : THIS",
"Expr : NEW IDENTIFIER '(' ')'",
"Expr : NEW Type '[' Expr ']'",
"Expr : INSTANCEOF '(' Expr ',' IDENTIFIER ')'",
"Expr : '(' CLASS IDENTIFIER ')' Expr",
"Constant : LITERAL",
"Constant : '[' ConstantList ']'",
"Constant : '[' ']'",
"Constant : NULL",
"ConstantList : ConstantList ',' Constant",
"ConstantList : Constant",
"Actuals : ExprList",
"Actuals :",
"ExprList : ExprList ',' Expr",
"ExprList : Expr",
"WhileStmt : WHILE '(' Expr ')' Stmt",
"ForStmt : FOR '(' SimpleStmt ';' Expr ';' SimpleStmt ')' Stmt",
"ForeachStmt : FOREACH '(' ForeachType IDENTIFIER IN Expr WHILE Expr ')' Stmt",
"ForeachStmt : FOREACH '(' ForeachType IDENTIFIER IN Expr ')' Stmt",
"ForeachType : VAR",
"ForeachType : Type",
"BreakStmt : BREAK",
"OCStmt : SCOPY '(' IDENTIFIER ',' Expr ')'",
"IfStmt : IF '(' Expr ')' Stmt ElseClause",
"GuardedStmt : IF '{' IfSubStmtList '}'",
"IfSubStmtList : IfSubStmtList IFOR IfSubStmt",
"IfSubStmtList : IfSubStmt",
"IfSubStmtList :",
"IfSubStmt : Expr ':' Stmt",
"ElseClause : ELSE Stmt",
"ElseClause :",
"ReturnStmt : RETURN Expr",
"ReturnStmt : RETURN",
"PrintStmt : PRINT '(' ExprList ')'",
};

//#line 545 "Parser.y"
    
	/**
	 * 打印当前归约所用的语法规则<br>
	 * 请勿修改。
	 */
    public boolean onReduce(String rule) {
		if (rule.startsWith("$$"))
			return false;
		else
			rule = rule.replaceAll(" \\$\\$\\d+", "");

   	    if (rule.endsWith(":"))
    	    System.out.println(rule + " <empty>");
   	    else
			System.out.println(rule);
		return false;
    }
    
    public void diagnose() {
		addReduceListener(this);
		yyparse();
	}
//#line 847 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    //if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      //if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        //if (yychar < 0)    //it it didn't work/error
        //  {
        //  yychar = 0;      //change it to default string (no -1!)
          //if (yydebug)
          //  yylexdebug(yystate,yychar);
        //  }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        //if (yydebug)
          //debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      //if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0 || valptr<0)   //check for under & overflow here
            {
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            //if (yydebug)
              //debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            //if (yydebug)
              //debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0 || valptr<0)   //check for under & overflow here
              {
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        //if (yydebug)
          //{
          //yys = null;
          //if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          //if (yys == null) yys = "illegal-symbol";
          //debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          //}
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    //if (yydebug)
      //debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    if (reduceListener == null || reduceListener.onReduce(yyrule[yyn])) // if intercepted!
      switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 56 "Parser.y"
{
						tree = new Tree.TopLevel(val_peek(0).clist, val_peek(0).loc);
					}
break;
case 2:
//#line 62 "Parser.y"
{
						yyval.clist.add(val_peek(0).cdef);
					}
break;
case 3:
//#line 66 "Parser.y"
{
                		yyval.clist = new ArrayList<Tree.ClassDef>();
                		yyval.clist.add(val_peek(0).cdef);
                	}
break;
case 5:
//#line 77 "Parser.y"
{
						yyval.vdef = new Tree.VarDef(val_peek(0).ident, val_peek(1).type, val_peek(0).loc);
					}
break;
case 6:
//#line 83 "Parser.y"
{
						yyval.type = new Tree.TypeIdent(Tree.INT, val_peek(0).loc);
					}
break;
case 7:
//#line 87 "Parser.y"
{
                		yyval.type = new Tree.TypeIdent(Tree.VOID, val_peek(0).loc);
                	}
break;
case 8:
//#line 91 "Parser.y"
{
                		yyval.type = new Tree.TypeIdent(Tree.BOOL, val_peek(0).loc);
                	}
break;
case 9:
//#line 95 "Parser.y"
{
                		yyval.type = new Tree.TypeIdent(Tree.STRING, val_peek(0).loc);
                	}
break;
case 10:
//#line 99 "Parser.y"
{
                		yyval.type = new Tree.TypeClass(val_peek(0).ident, val_peek(1).loc);
                	}
break;
case 11:
//#line 103 "Parser.y"
{
                		yyval.type = new Tree.TypeArray(val_peek(2).type, val_peek(2).loc);
                	}
break;
case 12:
//#line 109 "Parser.y"
{
						yyval.cdef = new Tree.ClassDef(val_peek(6).seal, val_peek(4).ident, val_peek(3).ident, val_peek(1).flist, val_peek(6).loc);
					}
break;
case 13:
//#line 115 "Parser.y"
{
						yyval.seal = Tree.SEALED;
					}
break;
case 14:
//#line 119 "Parser.y"
{
						yyval = new SemValue();
						yyval.seal = Tree.UNSEALED;
					}
break;
case 15:
//#line 126 "Parser.y"
{
						yyval.ident = val_peek(0).ident;
					}
break;
case 16:
//#line 130 "Parser.y"
{
                		yyval = new SemValue();
                	}
break;
case 17:
//#line 136 "Parser.y"
{
						yyval.flist.add(val_peek(0).vdef);
					}
break;
case 18:
//#line 140 "Parser.y"
{
						yyval.flist.add(val_peek(0).fdef);
					}
break;
case 19:
//#line 144 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.flist = new ArrayList<Tree>();
                	}
break;
case 21:
//#line 152 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.vlist = new ArrayList<Tree.VarDef>(); 
                	}
break;
case 22:
//#line 159 "Parser.y"
{
						yyval.vlist.add(val_peek(0).vdef);
					}
break;
case 23:
//#line 163 "Parser.y"
{
                		yyval.vlist = new ArrayList<Tree.VarDef>();
						yyval.vlist.add(val_peek(0).vdef);
                	}
break;
case 24:
//#line 170 "Parser.y"
{
						yyval.fdef = new MethodDef(true, val_peek(4).ident, val_peek(5).type, val_peek(2).vlist, (Block) val_peek(0).stmt, val_peek(4).loc);
					}
break;
case 25:
//#line 174 "Parser.y"
{
						yyval.fdef = new MethodDef(false, val_peek(4).ident, val_peek(5).type, val_peek(2).vlist, (Block) val_peek(0).stmt, val_peek(4).loc);
					}
break;
case 26:
//#line 180 "Parser.y"
{
						yyval.stmt = new Block(val_peek(1).slist, val_peek(2).loc);
					}
break;
case 27:
//#line 186 "Parser.y"
{
						yyval.slist.add(val_peek(0).stmt);
					}
break;
case 28:
//#line 190 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.slist = new ArrayList<Tree>();
                	}
break;
case 29:
//#line 197 "Parser.y"
{
						yyval.stmt = val_peek(0).vdef;
					}
break;
case 30:
//#line 202 "Parser.y"
{
                		if (yyval.stmt == null) {
                			yyval.stmt = new Tree.Skip(val_peek(0).loc);
                		}
                	}
break;
case 41:
//#line 220 "Parser.y"
{
						yyval.stmt = new Tree.Assign(val_peek(2).lvalue, val_peek(0).expr, val_peek(1).loc);
					}
break;
case 42:
//#line 224 "Parser.y"
{
                		yyval.stmt = new Tree.Exec(val_peek(0).expr, val_peek(0).loc);
                	}
break;
case 43:
//#line 228 "Parser.y"
{
                		yyval = new SemValue();
                	}
break;
case 45:
//#line 235 "Parser.y"
{
                		yyval = new SemValue();
                	}
break;
case 46:
//#line 241 "Parser.y"
{
						yyval.lvalue = new Tree.Ident(val_peek(1).expr, val_peek(0).ident, val_peek(0).loc);
						if (val_peek(1).loc == null) {
							yyval.loc = val_peek(0).loc;
						}
					}
break;
case 47:
//#line 248 "Parser.y"
{
                		yyval.lvalue = new Tree.Indexed(val_peek(3).expr, val_peek(1).expr, val_peek(3).loc);
                	}
break;
case 49:
//#line 255 "Parser.y"
{
                        yyval.lvalue = new Tree.VarStmt(val_peek(0).ident, val_peek(1).loc);
                    }
break;
case 50:
//#line 261 "Parser.y"
{
						yyval.expr = new Tree.CallExpr(val_peek(4).expr, val_peek(3).ident, val_peek(1).elist, val_peek(3).loc);
						if (val_peek(4).loc == null) {
							yyval.loc = val_peek(3).loc;
						}
					}
break;
case 51:
//#line 270 "Parser.y"
{
						yyval.expr = val_peek(0).lvalue;
					}
break;
case 54:
//#line 276 "Parser.y"
{
                        yyval.expr = new Tree.ArrayConstDoubleMod(val_peek(2).expr, val_peek(0).expr, val_peek(2).loc);
                    }
break;
case 55:
//#line 280 "Parser.y"
{
                        yyval.expr = new Tree.ArrayDoublePlus(val_peek(2).expr, val_peek(0).expr, val_peek(2).loc);
                    }
break;
case 56:
//#line 284 "Parser.y"
{
                        yyval.expr = new Tree.ArraySubArray(val_peek(5).expr, val_peek(3).expr, val_peek(1).expr, val_peek(5).loc);
                    }
break;
case 57:
//#line 288 "Parser.y"
{
                        yyval.expr = new Tree.ArrayDefault(val_peek(5).expr, val_peek(3).expr, val_peek(0).expr, val_peek(5).loc);
                    }
break;
case 58:
//#line 292 "Parser.y"
{
                        yyval.expr = new Tree.ArrayComp(val_peek(7).expr, val_peek(5).ident, val_peek(3).expr, val_peek(1).expr, val_peek(8).loc);
                    }
break;
case 59:
//#line 296 "Parser.y"
{
                        yyval.expr = new Tree.ArrayComp(val_peek(5).expr, val_peek(3).ident, val_peek(1).expr, new Tree.Literal(Tree.BOOL, true, val_peek(0).loc), val_peek(6).loc);
                    }
break;
case 60:
//#line 300 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.PLUS, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 61:
//#line 304 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.MINUS, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 62:
//#line 308 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.MUL, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 63:
//#line 312 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.DIV, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 64:
//#line 316 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.MOD, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 65:
//#line 320 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.EQ, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 66:
//#line 324 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.NE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 67:
//#line 328 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.LT, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 68:
//#line 332 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.GT, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 69:
//#line 336 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.LE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 70:
//#line 340 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.GE, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 71:
//#line 344 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.AND, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 72:
//#line 348 "Parser.y"
{
                		yyval.expr = new Tree.Binary(Tree.OR, val_peek(2).expr, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 73:
//#line 352 "Parser.y"
{
                		yyval = val_peek(1);
                	}
break;
case 74:
//#line 356 "Parser.y"
{
                		yyval.expr = new Tree.Unary(Tree.NEG, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 75:
//#line 360 "Parser.y"
{
                		yyval.expr = new Tree.Unary(Tree.NOT, val_peek(0).expr, val_peek(1).loc);
                	}
break;
case 76:
//#line 364 "Parser.y"
{
                		yyval.expr = new Tree.ReadIntExpr(val_peek(2).loc);
                	}
break;
case 77:
//#line 368 "Parser.y"
{
                		yyval.expr = new Tree.ReadLineExpr(val_peek(2).loc);
                	}
break;
case 78:
//#line 372 "Parser.y"
{
                		yyval.expr = new Tree.ThisExpr(val_peek(0).loc);
                	}
break;
case 79:
//#line 376 "Parser.y"
{
                		yyval.expr = new Tree.NewClass(val_peek(2).ident, val_peek(3).loc);
                	}
break;
case 80:
//#line 380 "Parser.y"
{
                		yyval.expr = new Tree.NewArray(val_peek(3).type, val_peek(1).expr, val_peek(4).loc);
                	}
break;
case 81:
//#line 384 "Parser.y"
{
                		yyval.expr = new Tree.TypeTest(val_peek(3).expr, val_peek(1).ident, val_peek(5).loc);
                	}
break;
case 82:
//#line 388 "Parser.y"
{
                		yyval.expr = new Tree.TypeCast(val_peek(2).ident, val_peek(0).expr, val_peek(0).loc);
                	}
break;
case 83:
//#line 394 "Parser.y"
{
						yyval.expr = new Tree.Literal(val_peek(0).typeTag, val_peek(0).literal, val_peek(0).loc);
					}
break;
case 84:
//#line 398 "Parser.y"
{
                        yyval.expr = new Tree.ArrayConstant(val_peek(1).elist, val_peek(2).loc);
                    }
break;
case 85:
//#line 402 "Parser.y"
{
                        yyval.expr = new Tree.ArrayConstant(new ArrayList<Tree.Expr>(), val_peek(1).loc);
                    }
break;
case 86:
//#line 406 "Parser.y"
{
						yyval.expr = new Null(val_peek(0).loc);
					}
break;
case 87:
//#line 412 "Parser.y"
{
                        yyval.elist.add(val_peek(0).expr);
                    }
break;
case 88:
//#line 416 "Parser.y"
{
                        yyval.elist = new ArrayList<Tree.Expr>();
                        yyval.elist.add(val_peek(0).expr);
                    }
break;
case 90:
//#line 425 "Parser.y"
{
                		yyval = new SemValue();
                		yyval.elist = new ArrayList<Tree.Expr>();
                	}
break;
case 91:
//#line 432 "Parser.y"
{
						yyval.elist.add(val_peek(0).expr);
					}
break;
case 92:
//#line 436 "Parser.y"
{
                		yyval.elist = new ArrayList<Tree.Expr>();
						yyval.elist.add(val_peek(0).expr);
                	}
break;
case 93:
//#line 443 "Parser.y"
{
						yyval.stmt = new Tree.WhileLoop(val_peek(2).expr, val_peek(0).stmt, val_peek(4).loc);
					}
break;
case 94:
//#line 449 "Parser.y"
{
						yyval.stmt = new Tree.ForLoop(val_peek(6).stmt, val_peek(4).expr, val_peek(2).stmt, val_peek(0).stmt, val_peek(8).loc);
					}
break;
case 95:
//#line 455 "Parser.y"
{
                        yyval.stmt = new Tree.ForeachStmt(val_peek(7).type, val_peek(6).ident, val_peek(4).expr, val_peek(2).expr, val_peek(0).stmt, val_peek(9).loc);
                    }
break;
case 96:
//#line 459 "Parser.y"
{
                        yyval.stmt = new Tree.ForeachStmt(val_peek(5).type, val_peek(4).ident, val_peek(2).expr, new Tree.Literal(Tree.BOOL, true, val_peek(1).loc), val_peek(0).stmt, val_peek(7).loc);
                    }
break;
case 97:
//#line 465 "Parser.y"
{
                        yyval.type = null;
                    }
break;
case 99:
//#line 473 "Parser.y"
{
						yyval.stmt = new Tree.Break(val_peek(0).loc);
					}
break;
case 100:
//#line 479 "Parser.y"
{
						yyval.stmt = new Tree.Scopy(val_peek(3).ident, val_peek(1).expr, val_peek(5).loc);
					}
break;
case 101:
//#line 485 "Parser.y"
{
						yyval.stmt = new Tree.If(val_peek(3).expr, val_peek(1).stmt, val_peek(0).stmt, val_peek(5).loc);
					}
break;
case 102:
//#line 491 "Parser.y"
{
                        yyval.stmt = new Tree.Guard(val_peek(1).iflist, val_peek(3).loc);
                    }
break;
case 103:
//#line 497 "Parser.y"
{
                        yyval.iflist.add(val_peek(0).ifsub);
                    }
break;
case 104:
//#line 501 "Parser.y"
{

                        yyval.iflist = new ArrayList<Tree.IfSub>();
                        yyval.iflist.add(val_peek(0).ifsub);
                    }
break;
case 105:
//#line 507 "Parser.y"
{
                        yyval.iflist = new ArrayList<Tree.IfSub>();
                    }
break;
case 106:
//#line 513 "Parser.y"
{
                        yyval.ifsub = new Tree.IfSub(val_peek(2).expr, val_peek(0).stmt, val_peek(2).loc);
                    }
break;
case 107:
//#line 519 "Parser.y"
{
						yyval.stmt = val_peek(0).stmt;
					}
break;
case 108:
//#line 523 "Parser.y"
{
						yyval = new SemValue();
					}
break;
case 109:
//#line 529 "Parser.y"
{
						yyval.stmt = new Tree.Return(val_peek(0).expr, val_peek(1).loc);
					}
break;
case 110:
//#line 533 "Parser.y"
{
                		yyval.stmt = new Tree.Return(null, val_peek(0).loc);
                	}
break;
case 111:
//#line 539 "Parser.y"
{
						yyval.stmt = new Print(val_peek(1).elist, val_peek(3).loc);
					}
break;
//#line 1570 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    //if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      //if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        //if (yychar<0) yychar=0;  //clean, if necessary
        //if (yydebug)
          //yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      //if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
//## The -Jnorun option was used ##
//## end of method run() ########################################



//## Constructors ###############################################
//## The -Jnoconstruct option was used ##
//###############################################################



}
//################### END OF CLASS ##############################
